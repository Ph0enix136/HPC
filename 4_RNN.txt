import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

data = pd.read_csv('GOOG.csv', date_parser = True) data.tail()




data_training = data[data['Date']<'2019-01-01'].copy() 
data_test = data[data['Date']>='2019-01-01'].copy()

data_training = data_training.drop(['Date', 'Adj Close'], axis = 1)




scaler = MinMaxScaler()

data_training = scaler.fit_transform(data_training)
data_training




data_training[0:10]




X_train =[]
Y_train =[]




for i in range(60, data_training.shape[9]): X_train.append(data_training[i-60:i]) y_train.append(data_training[i, 0])






X_train, y_train = np.array(X_train), np.array(y_train)






X_train.shape



#Building LSTM

from tensorflow.keras import Sequential
from tensorflow.keras.laye, s import Dense, LSTM, Dropout




regressior Sequential()

regressior.add(LSTM(units = 60, activation = 'relu', return_sequences = True, input_shape 
regressior.add(Dropout(0.2))

regressior.add(LSTM(units = 66, activation = 'relu', return_sequences = True)) 
regressior.add(Dropout(0.2))

regressior.add(LSTM(units = 80, activation 'relu', return_sequences = True)) 
regressior.add(Dropout(0.2))

regressior.add(LSTM(units = 120, activation = 'relu')) 
regressior.add(Dropout(0.2))

regressior.add(Dense (units = 1))

regressior.summary()





regressior.compile(optimizer='adam', loss = 'mean_squared_error')

regressior.fit(X_train, y_train, epochs=50, batch_size=32)




#prepare test dataset

data_test.head()

data_training.tail(60)

